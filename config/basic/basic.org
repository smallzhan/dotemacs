#+TITLE: 基本设置

基本设置主要是针对一些内置的模块进行定制，或打开一些内置默认没打开的功能。

* Emacs 外观以及信息设置
#+BEGIN_SRC emacs-lisp
;;关闭开机画面
(setq inhibit-startup-message t)
(setq gnus-inhibit-startup-message t)

(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)

(transient-mark-mode t)
;(setq x-select-enable-clipboard t)
(setq frame-title-format "Guoqiang Jin@%b")
(setq-default ispell-program-name "aspell")

;;去掉工具栏
(tool-bar-mode -1)
;;去掉滚动栏
(scroll-bar-mode -1)
;;去掉菜单栏
(menu-bar-mode -1)
;;F10默认绑定到菜单栏, 暂时使用不爽，留着。
(setq user-full-name "Guoqiang Jin")
;(setq usr-full-address "ustczhan@gmail.com")
(setq user-mail-address "ustczhan@gmail.com")
#+END_SRC
* 小功能定制
#+BEGIN_SRC emacs-lisp
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook  'turn-on-auto-fill)
(global-font-lock-mode t)
;;From emacs mailling lists "How to enable font lock for functions called by
;;other functions"
(font-lock-add-keywords
 nil `(("\\([[:alpha:]_][[:alnum:]_]*\\)("
        1 font-lock-function-name-face)) t)

(auto-image-file-mode t)
(fset 'yes-or-no-p 'y-or-n-p)
(column-number-mode t)
;; (show-paren-mode t)
;; (setq show-paren-style 'parenthesis)
;;(setq show-paren-style 'expression) ;;高亮显示括号匹配区域。颜色不好。取消..
(setq visible-bell t)


(icomplete-mode -1)
(auto-compression-mode 1)
(setq apropos-do-all t)
;(partial-completion-mode 1)
(setq default-fill-column 80)

(setq search-highlight t)
(setq query-replace-highlight t)
(setq bookmark-save-flag 1)

;;自动补全功能，这是从王垠的网站直接Copy过来的
;;(autoload 'senator-try-expand-semantic "senator")
(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(
                                        ;senator-try-expand-semantic
        try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-list-all-buffers
        try-expand-line
        try-expand-line-all-buffers
        try-complete-lisp-symbol-partially
        try-expand-whole-kill))

;;设定删除保存记录为200
(setq kill-ring-max 200)

;;设置 sentence-end 可以识别中文标点。不用在 fill 时在句号后插 入两个空格。
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
(setq sentence-end-double-space nil)

;;不管你的光标在文档的那个位置，或是在 minibuffer，鼠标 中键一点击，
;;X selection 的内容就被插入到那个位置。
(setq mouse-yank-at-point t)
(setq default-tab-width 4)
(setq tab-width 4)
;;光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。
(mouse-avoidance-mode 'animate)

;;把这些缺省禁用的功能打开。
(put 'set-goal-column 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'LaTeX-hide-environment 'disabled nil)

;;设置一下备份时的版本控制，这样更加安全。
(setq version-control t)
(setq kept-old-versions 1)
(setq kept-new-versions 2)
(setq delete-old-versions t)
(setq dired-kept-versions 1)
(setq backup-directory-alist '(("." . "~/.emacs.tmp")))
(setq backup-by-copying t)


(setq lazy-lock-defer-on-scrolling t)
;;(setq font-lock-support-mode 'lazy-lock-mode)
(setq font-lock-maximum-decoration t)

;;前缀
(setq adaptive-fill-regexp "[ \t]+\\|[ \t]*\\([0-9]+\\.\\|\\*+\\)[ \t]*")
(setq adaptive-fill-first-line-regexp "^\\* *$")


;; Auto refresh buffers
(global-auto-revert-mode 1)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;;(global-set-key (quote [8388640]) (quote set-mark-command))
 ;;绑定 set-mark-command 到s-<SPC>
;(global-set-key (quote [8388640]) (quote mark-word))
;;time-stamp 的设置。
(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %04y-%02m-%02d %02H:%02M:%02S")
(setq time-stamp-end: "\n")
(add-hook 'write-file-hooks 'time-stamp)
#+END_SRC
* eshell 设置
#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-cycle-completions nil
        eshell-save-history-on-exit t
        eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

  (with-eval-after-load 'esh-opt
       (require 'em-cmpl)
       (require 'em-prompt)
       (require 'em-term)
       (require 'em-smart)
       ;; TODO: for some reason requiring this here breaks it, but
       ;; requiring it after an eshell session is started works fine.
       ;; (require 'eshell-vc)
       (setenv "PAGER" "cat")
       (setq eshell-where-to-jump 'begin)
       (setq eshell-review-quick-commands nil)
       (setq eshell-smart-space-goes-to-end t)
       ; (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
       (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
                 '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-bol)))
       (add-to-list 'eshell-visual-commands "ssh")
       (add-to-list 'eshell-visual-commands "tail")
       (add-to-list 'eshell-command-completions-alist
                    '("gunzip" "gz\\'"))
       (add-to-list 'eshell-command-completions-alist
                    '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'")))

  (require-package 'eshell-prompt-extras)
  (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt nil
          eshell-prompt-function 'epe-theme-lambda))
  ;;     (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)))

  (defun eshell/rpwd2home ()
      (let ((abs-path (eshell/pwd))
            (home-dir (getenv "HOME")))
         (if (string-match home-dir abs-path)
            (replace-match "~" nil nil abs-path)
           abs-path)
         )
  )

  (defun eshell/rpwd ()
    (let ((rdir (eshell/rpwd2home)))
     (car (last (split-string rdir "/"))))
  )

  (setq eshell-directory-name
        (expand-file-name "./" (expand-file-name "eshell" my-config-dir)))

  (setq eshell-prompt-function
        (lambda ()
          (concat "[" (user-login-name) "@" (system-name) ":" (eshell/rpwd) "]"
                  (if (= (user-uid) 0) "# " "$ "))))

  (setq eshell-prompt-regexp "^[^#$\n]*[#$] ")


  (add-hook 'emacs-startup-hook #'(lambda ()
                                   (let ((default-directory (getenv "HOME")))
                                     (command-execute 'eshell)
                                     (bury-buffer))))

  (require-package 'pcmpl-git)
  (require-package 'pcomplete-extension)

  (defun eshell/deb (&rest args)
    (eshell-eval-using-options
     "deb" args
     '((?f "find" t find "list available packages matching a pattern")
       (?i "installed" t installed "list installed debs matching a pattern")
       (?l "list-files" t list-files "list files of a package")
       (?s "show" t show "show an available package")
       (?v "version" t version "show the version of an installed package")
       (?w "where" t where "find the package containing the given file")
       (nil "help" nil nil "show this usage information")
       :show-usage)
     (eshell-do-eval
      (eshell-parse-command
       (cond
        (find
         (format "apt-cache search %s" find))
        (installed
         (format "dlocate -l %s | grep '^.i'" installed))
        (list-files
         (format "dlocate -L %s | sort" list-files))
        (show
         (format "apt-cache show %s" show))
        (version
         (format "dlocate -s %s | egrep '^(Package|Status|Version):'" version))
        (where
         (format "dlocate %s" where))))
      t)))

  (defun eshell/vi (&rest args)
    "Invoke `find-file' on the file.
  \"vi +42 foo\" also goes to line 42 in the buffer."
    (while args
      (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
          (let* ((line (string-to-number (match-string 1 (pop args))))
                 (file (pop args)))
            (find-file file)
            (goto-line line))
        (find-file (pop args)))))

  (defun eshell/emacs (&rest args)
    "Open a file in emacs. Some habits die hard."
    (if (null args)
        ;; If I just ran "emacs", I probably expect to be launching
        ;; Emacs, which is rather silly since I'm already in Emacs.
        ;; So just pretend to do what I ask.
        (bury-buffer)
      ;; We have to expand the file names or else naming a directory in an
      ;; argument causes later arguments to be looked for in that directory,
      ;; not the starting directory
      (mapc #'find-file (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))

  (defun eshell/clear ()
    "Clear the current buffer, leaving one prompt at the top."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      ))

  (defun pcomplete/eshell-mode/bmk ()
    "Completion for `bmk'"
    (pcomplete-here (bookmark-all-names)))

  (defun eshell/bmk (&rest args)
    "Integration between EShell and bookmarks.
  For usage, execute without arguments."
    (setq args (eshell-flatten-list args))
    (let ((bookmark (car args))
          filename name)
      (cond
       ((eq nil args)
        (format "Usage:
   ,* bmk BOOKMARK to
   ,** either change directory pointed to by BOOKMARK
   ,** or bookmark-jump to the BOOKMARK if it is not a directory.
   ,* bmk . BOOKMARK to bookmark current directory in BOOKMARK.
   Completion is available."))
       ((string= "." bookmark)
        ;; Store current path in EShell as a bookmark
        (if (setq name (car (cdr args)))
            (progn
              (bookmark-set name)
              (bookmark-set-filename name (eshell/pwd))
              (format "Saved current directory in bookmark %s" name))
          (error "You must enter a bookmark name")))
       (t
         ;; Check whether an existing bookmark has been specified
         (if (setq filename (cdr (car (bookmark-get-bookmark-record bookmark))))
             ;; If it points to a directory, change to it.
             (if (file-directory-p filename)
                 (eshell/cd filename)
               ;; otherwise, just jump to the bookmark
               (bookmark-jump bookmark))
           (error "%s is not a bookmark" bookmark))))))

    (defadvice eldoc-current-symbol (around eldoc-current-symbol activate)
      ad-do-it
      (if (and (not ad-return-value)
               (eq major-mode 'eshell-mode))
          (save-excursion
            (goto-char eshell-last-output-end)
            (let ((esym (eshell-find-alias-function (current-word)))
                  (sym (intern-soft (current-word))))
              (setq ad-return-value (or esym sym))))))

  (eval-after-load 'eshell
    '(progn
      (require-package 'eshell-autojump)
      (require 'eshell-autojump)
      (require-package 'eshell-z)
      (require 'eshell-z)
  ))


  (setq eshell-aliases-file "eshellalias")
  (defalias 'v 'find-file)
  (defalias 'vo 'find-file-other-window)
  (defalias 'eshell/vim 'eshell/vi)

  ;; with helm
  (add-hook 'eshell-mode-hook
             #'(lambda ()
                 (define-key eshell-mode-map
                   (kbd "C-c C-l")
                   'helm-eshell-history)))

  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map
                  [remap eshell-pcomplete]
                  'helm-esh-pcomplete)))
#+END_SRC
* 其他设置

主要包括 scratch 的保存，以及 cygwin，还有 eshell 相关的东西
#+BEGIN_SRC emacs-lisp
;; disable the fucking stupid save *scratch* in every fucking
;; place!!!!!!!!!!!!!!!!!!!!!!
(add-hook 'emacs-startup-hook
          (lambda ()
			(with-current-buffer (get-buffer "*scratch*")
			  (auto-save-mode -1))))

(when (eq system-type 'windows-nt)
  (require 'cygwin-mount)
  (cygwin-mount-activate)
  (add-hook 'comint-output-filter-functions
            'shell-strip-ctrl-m nil t)
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt nil t)
  (setq explicit-shell-file-name "bash.exe")
  ;; For subprocesses invoked via the shell
;; (e.g., “shell -c command”)
  (setq shell-file-name explicit-shell-file-name)
)
#+END_SRC
